//version = "0.0.1-SNAPSHOT"
//group = "uk.co.magictractor"

plugins {
    id "java-library"

//    `java-library`
//    `jacoco`
//    
//    // TODO! restore checkstyle plugin with config copied from JUnit5
//    //`checkstyle`
//    
//    // See https://docs.gradle.org/current/userguide/publishing_maven.html
//    `maven-publish`
}

repositories {
    mavenCentral()
    // For Spring Social 2.0 milestones. Will never be released. Spring OAuth moved to Spring Security. Rework code then remove this.
    maven { url "https://repo.spring.io/artifactory/libs-milestone-local" }
}

dependencies {
    implementation("org.slf4j:slf4j-api:2.0.13")
    
    // For JSON parsing with Boa
    implementation("com.jayway.jsonpath:json-path:2.9.0")
    implementation("com.google.code.gson:gson:2.11.0")
    
    // For creating Json bodies in Boa OAuth2 auth requests
    // No! auth requests use form data, not Json
    //implementation("javax.json:javax.json-api:1.1.4")
    
    // Provide one of these if a transort only (no auth) connection is required
    // Boa authorisation is layered on top of a transport only connection
    // Spring social dynamically determines the transport depending on available classes.
    compileOnly("org.apache.httpcomponents.client5:httpclient5:5.3.1")

    // Provide one of these to use a third-party OAuth implementation (not Boa)
    
    // https://developers.google.com/api-client-library/java/google-oauth-java-client/oauth1
    // If changing the version, check the Guava version too, otherwise an Android Guava dependency may result.
    // test by running FlickrPhotoUpdateProcessor which can exhibit a class loader problem with Streams
    compileOnly("com.google.oauth-client:google-oauth-client:1.36.0")
    
    
    // Spring Social mothballed July 2019. See https://spring.io/projects/spring-social.
    // OAuth moved to Spring Security. See https://spring.io/blog/2018/07/03/spring-social-end-of-life-announcement.
    compileOnly("org.springframework.social:spring-social-core:2.0.0.M4")
    // Spring Social uses Jackson for converting Json
    compileOnly("com.fasterxml.jackson.core:jackson-databind:2.10.0")
            
    // For reading metadata from local photo files
    implementation("com.drewnoakes:metadata-extractor:2.19.0")
    
    // Provide one of these if using a callback server
    compileOnly("io.netty:netty-all:4.1.110.Final")
    compileOnly("io.undertow:undertow-core:2.3.13.Final")
			
    // Optional for determining content types
    compileOnly("org.apache.tika:tika-core:2.9.2")
    
    // Advapi32Util for JNA based Windows registry access for user store
    compileOnly("net.java.dev.jna:jna-platform:5.14.0")

    // MoreObjects is used for toString() implementations
    // also Iterator concatenation and filtering
    implementation("com.google.guava:guava:33.2.0-jre")

    testImplementation("uk.co.magictractor:jura:0.0.1-SNAPSHOT")
    
    // Logger implementation for unit tests and main() methods.
    runtimeOnly("ch.qos.logback:logback-classic:1.5.6")
}


// This I why I switched from Kotlin to Groovy
// See
// https://discuss.gradle.org/t/compileonly-dependencies-are-not-available-in-tests/15366/7
// the sourceSets suggestion omits dependencies such as xnio for undertow
// https://github.com/gradle/gradle/issues/10502
configurations {
    // runtimeOnly (rather than testImplementation) for use with main() methods
    // from Eclipse as well as unit tests
    runtimeOnly.extendsFrom compileOnly
}

// See https://docs.gradle.org/current/userguide/build_environment.html
//tasks.withType<JavaCompile>().configureEach {
//tasks.withType<JavaCompile> {
//    options.compilerArgs = listOf("-Xdoclint:none", "-Xlint:none", "-nowarn")
//}

//tasks.withType<Test> {
//    useJUnitPlatform() {
//        filter {
//            excludeTags("within-suite")
//        }
//    }
//    finalizedBy("jacocoTestReport")
//}

//publishing {
//    publications {
//        create<MavenPublication>("${rootProject.name}") {
//            from(components["java"])
//        }
//    }
//
//    repositories {
//        mavenLocal()
//    }
//}
